{"name":"ParmEd","tagline":"Amber parameter topology file editor","body":"ParmEd\r\n======\r\n\r\nAmber parameter topology file editor\r\n\r\nLicense\r\n=======\r\n                    LESSER GPL LICENSE INFO                             \r\n\r\nCopyright (C) 2010 - 2014 Jason Swails\r\n\r\nThis program is free software; you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n   \r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with this program; if not, write to the Free Software\r\nFoundation, Inc., 59 Temple Place - Suite 330,\r\nBoston, MA 02111-1307, USA.\r\n\r\nDescription\r\n===========\r\n\r\nThis package is designed to make it safe and easy(er) to rapidly prototype\r\nchanges to the underlying Hamiltonian in Amber as defined in the\r\nparameter-topology file. A full description of its capabilities is described in\r\nthe accompanying manual (which is extracted from the full Amber manual that\r\nis/will be released with Amber 14). The program is comprised of a command\r\ninterpreter (with full readline support), a GUI- frontend based on Tkinter with\r\nclickable buttons for each action, and a flexible Python API whose use follows\r\nnaturally from the simple command interpreter syntax.\r\n\r\nThe underlying AmberParm class that ParmEd was built around was augmented with\r\nOpenMM support so that it is able to directly create an OpenMM System instance\r\nwith a call signature almost identical to the one provided in the OpenMM\r\napplication layer. Improvements implemented here include:\r\n\r\n  o  Periodic box information is set up from the input coordinate file rather\r\n     than the parameter-topology file, since that is where the 'preferred' box\r\n     information is stored in Amber\r\n  \r\n  o  The parameter topology file class can read in both a topology file and a\r\n     coordinate file at the same time (this is required to set the default box\r\n     information from the inpcrd file)\r\n  \r\n  o  The restart file class/parser is capable of reading both Amber restarts as\r\n     well as Amber NetCDF restart files, with the format detected automatically\r\n  \r\n  o  In many cases, System creation is noticeably faster with this class for\r\n     large systems.\r\n\r\nAlso included are a handful of OpenMM reporters in the\r\nchemistry.amber.openmmreporters module, including:\r\n\r\n  o  AmberStateDataReporter - Basically copied from StateDataReporter, but\r\n       prints out data in standard Amber units (and provides options in the call\r\n       signature to specify the set of units you want to use)\r\n  \r\n  o  RestartReporter - Allows Amber-style ASCII or NetCDF restart files to be\r\n       written periodically during a simulation. It can either write a series of\r\n       numbered restarts or continually overwrite the previous one. Fully\r\n       compatible with all Amber programs.\r\n  \r\n  o  MdcrdReporter - Allows Amber-style ASCII trajectory files to be written\r\n  \r\n  o  NetCDFReporter - Allows Amber-style NetCDF trajectories to be written\r\n\r\nThe principle difference between the NetCDF support included here and that\r\nincluded in MDTraj is that the NetCDF parsing here is backend agnostic,\r\nsupporting the implementations in the netCDF4, scipy, and ScientificPython\r\npackages (the second one is written in pure Python and does not require linking\r\nto the NetCDF libraries). A default implementation is chosen if no explicit\r\nchoice is made in the order listed above.\r\n\r\nNotable OpenMM Capabilities\r\n===========================\r\n\r\nThe OpenMM action in ParmEd will read a pmemd/sander-like command-line and an\r\nAmber-style input file and run the simulation using OpenMM through the Python\r\napplication layer with equivalent settings.  It includes options to specify the\r\nplatform and precision model, and also has the option to generate a working\r\nPython script that will run the equivalent calculation.\r\n\r\nThe \"energy\" action in ParmEd will compute a single-point energy from the loaded\r\ncoordinates, optionally decomposing the energy contributions into \"bond\",\r\n\"angle\", \"dihedral\", and \"nonbonded\" contributions (finer-grained decomposition\r\nof the nonbonded components is not currently possible except for\r\ndirect/reciprocal decomposition).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}